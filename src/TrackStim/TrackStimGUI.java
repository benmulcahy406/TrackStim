/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package TrackStim;

import java.io.File;

import org.micromanager.Studio;
import org.micromanager.LogManager;


import javax.swing.filechooser.FileSystemView;
import javax.swing.JFileChooser;
/**
 *
 * @author Mei Zhen
 */
public class TrackStimGUI extends javax.swing.JFrame {
    public Studio studio;
    public LogManager lm;


    // UI state that will be sent as arguments to the sequence acquisition function
    public int numberOfFrames;
    public double exposureMs;
    public String directoryPath;
    public boolean running;

    /**
     * Creates new form TrackStimGUI
     */
    public TrackStimGUI(Studio studio_) {
        studio = studio_;
        lm = studio.logs();

        // set intial state
        // TODO: derive the state from the ui text or derive the ui text from state
        numberOfFrames = 100; 
        exposureMs = 100.0;
        running = false;
        directoryPath = ""; // ensure that the user chooses a directory
        
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        framesLabel = new javax.swing.JLabel();
        frames = new javax.swing.JTextField();
        exposureLabel = new javax.swing.JLabel();
        exposure = new javax.swing.JTextField();
        chooseDirectory = new javax.swing.JButton();
        directory = new javax.swing.JTextField();
        run = new javax.swing.JButton();
        stop = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        framesLabel.setText("Number of frames:");

        frames.setText("300");
        frames.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                framesActionPerformed(evt);
            }
        });

        exposureLabel.setText("Exposure (ms): ");

        exposure.setText("100.0");
        exposure.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exposureActionPerformed(evt);
            }
        });

        chooseDirectory.setText("Choose directory");
        chooseDirectory.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                chooseDirectoryMouseClicked(evt);
            }
        });
        chooseDirectory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseDirectoryActionPerformed(evt);
            }
        });

        directory.setText("Choose directory to save to");
        directory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                directoryActionPerformed(evt);
            }
        });

        run.setText("RUN");
        run.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runActionPerformed(evt);
            }
        });

        stop.setText("STOP");
        stop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(exposureLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(framesLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(frames, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(exposure, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(run)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(stop))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(chooseDirectory)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(directory, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(framesLabel)
                    .addComponent(frames, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exposureLabel)
                    .addComponent(exposure, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chooseDirectory)
                    .addComponent(directory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(run)
                    .addComponent(stop))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void framesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_framesActionPerformed
        try {
            numberOfFrames = Integer.parseInt(frames.getText());
            lm.logMessage("number of frames set to " + String.valueOf(numberOfFrames));
        } catch (java.lang.Exception e){
            lm.logMessage(e.getMessage());
            lm.showMessage("number of frames must be an integer e.g. 100");
        }
    }//GEN-LAST:event_framesActionPerformed

    private void exposureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exposureActionPerformed
        try {
            exposureMs = Double.parseDouble(exposure.getText());
            lm.logMessage("exposure ms set to " + String.valueOf(exposureMs));
        } catch (java.lang.Exception e){
            lm.logMessage(e.getMessage());
            lm.showMessage("exposure must be a decimal number e.g. 100.0");
        }
    }//GEN-LAST:event_exposureActionPerformed



    private void directoryActionPerformed(java.awt.event.ActionEvent evt) {                                                
    }                                               

    private void chooseDirectoryMouseClicked(java.awt.event.MouseEvent evt) {                                                
    }                                               

    private void chooseDirectoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseDirectoryActionPerformed
        // TODO add your handling code here:
        jFileChooser1.setCurrentDirectory(new java.io.File("."));
        jFileChooser1.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int fileChosen = jFileChooser1.showOpenDialog(this);

        if( fileChosen == JFileChooser.APPROVE_OPTION){
            java.io.File f = jFileChooser1.getSelectedFile();
            String fPath = f.getAbsolutePath();
            directory.setText(fPath);
            directoryPath = fPath;
        }
        
    }//GEN-LAST:event_chooseDirectoryActionPerformed

    private void runActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runActionPerformed
        File f = new File(directoryPath);
		if(!f.exists()){
            lm.showMessage("Directory " + directoryPath + " does not exist. Please select a directory");
            return;
        }

        if(!f.isDirectory()){
            lm.showMessage("Directory " + directoryPath + " is a file.  Please select a directory");
            return;
        }

        running = true;
        lm.logMessage(String.valueOf(running));
    }//GEN-LAST:event_runActionPerformed

    private void stopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopActionPerformed
        running = false;
        lm.logMessage(String.valueOf(running));
    }//GEN-LAST:event_stopActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton chooseDirectory;
    private javax.swing.JTextField directory;
    private javax.swing.JTextField exposure;
    private javax.swing.JLabel exposureLabel;
    private javax.swing.JTextField frames;
    private javax.swing.JLabel framesLabel;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JButton run;
    private javax.swing.JButton stop;
    // End of variables declaration//GEN-END:variables
}
